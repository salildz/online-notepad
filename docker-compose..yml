version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: notepad-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-securepassword}
      POSTGRES_DB: ${DB_NAME:-notepad}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: notepad-server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      DB_HOST: postgres
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-securepassword}
      DB_NAME: ${DB_NAME:-notepad}
      DB_PORT: 5432
      DB_SSL: ${DB_SSL:-false}
      JWT_SECRET: ${JWT_SECRET:-changeme_jwt_secret}
      JWT_EXPIRY: ${JWT_EXPIRY:-15m}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET:-changeme_refresh_secret}
      REFRESH_TOKEN_EXPIRY: ${REFRESH_TOKEN_EXPIRY:-7d}
      PORT: 5000
    ports:
      - "5000:5000"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${API_URL:-http://localhost:5000/api}
    container_name: notepad-client
    depends_on:
      - server
    ports:
      - "80:80"
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: